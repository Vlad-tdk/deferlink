"""
DeferLink FastAPI Application
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏–ø–ª–∏–Ω–∫–æ–≤
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Optional, Literal, Union
import uvicorn
from fastapi import Cookie, FastAPI, HTTPException, Request, Response, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse

# –ò–ú–ü–û–†–¢–´
from .config import Config
from .database import init_database
from .deeplink_handler import DeepLinkHandler
from .models import ResolveRequest, ResolveResponse
from .utils import detect_ios_device, generate_instruction_page, get_client_ip
from .api import deeplinks, health, stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–ø–ª–∏–Ω–∫–æ–≤
deeplink_handler = DeepLinkHandler()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API –º–æ–¥—É–ª–µ–π
deeplinks.set_deeplink_handler(deeplink_handler)
stats.set_deeplink_handler(deeplink_handler)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á
_cleanup_task: Optional[asyncio.Task[None]] = None
_optimization_task: Optional[asyncio.Task[None]] = None


async def cleanup_task() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        try:
            deleted_count = deeplink_handler.cleanup_expired_sessions()
            if deleted_count > 0:
                logger.info(f"Cleanup completed: {deleted_count} sessions deleted")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π: {e}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–æ–π
        await asyncio.sleep(Config.CLEANUP_INTERVAL_MINUTES * 60)


async def optimization_task() -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    while True:
        try:
            if Config.AUTO_OPTIMIZE_WEIGHTS:
                logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–µ—Å–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
                optimized_weights = deeplink_handler.optimize_algorithm_weights()
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {optimized_weights}")

            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            deeplink_handler.intelligent_matcher.clear_cache()
            logger.debug("–ö—ç—à–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        await asyncio.sleep(3600)


async def startup_tasks():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    global _cleanup_task, _optimization_task

    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è DeferLink...")

    #–ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
    try:
        Config.validate_config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info(f"Environment: {Config.ENVIRONMENT}")
        logger.info(f"SECRET_KEY: {'Set' if Config.SECRET_KEY != 'dev-secret-key-change-in-production' else 'DEFAULT (INSECURE!)'}")
        logger.info(f"CORS Origins: {Config.CORS_ORIGINS}")
        logger.info(f"Cookie Secure: {Config.COOKIE_SECURE}")
        logger.info(f"Rate Limiting: {Config.RATE_LIMIT_ENABLED}")

        if Config.ENVIRONMENT in ["production", "prod"]:
            logger.info("PRODUCTION MODE - Security checks enabled")
        else:
            logger.info("üõ†Ô∏è DEVELOPMENT MODE")

    except ValueError as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: {e}")
        raise SystemExit(1)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    _cleanup_task = asyncio.create_task(cleanup_task())
    _optimization_task = asyncio.create_task(optimization_task())
    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")


async def shutdown_tasks():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    global _cleanup_task, _optimization_task

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    if _cleanup_task is not None:
        _cleanup_task.cancel()
        try:
            await _cleanup_task
        except asyncio.CancelledError:
            pass

    if _optimization_task is not None:
        _optimization_task.cancel()
        try:
            await _optimization_task
        except asyncio.CancelledError:
            pass

    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        deeplink_handler.intelligent_matcher.clear_cache()
        logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await startup_tasks()
    try:
        yield
    finally:
        await shutdown_tasks()


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="DeferLink - Deferred Deep Links System",
    description="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏–ø–ª–∏–Ω–∫–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=Config.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(deeplinks.router)
app.include_router(health.router)
app.include_router(stats.router)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    client_ip = get_client_ip(request)
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {client_ip}: {exc}")

    return JSONResponse(
        status_code=500,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "error_id": str(hash(str(exc)))[:8]
        }
    )


# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "DeferLink API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs",
        "health": "/api/v1/health"
    }


# –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–ø–ª–∏–Ω–∫–æ–≤
@app.get("/dl")
async def create_deeplink(
    request: Request,
    response: Response,
    promo_id: str,
    domain: str,
    ttl: int = Config.DEFAULT_TTL_HOURS,
    session_id: Optional[str] = Cookie(None, alias=Config.COOKIE_NAME)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–∏–ø–ª–∏–Ω–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º fingerprint

    Args:
        promo_id: ID –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
        domain: –î–æ–º–µ–Ω –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö
        session_id: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —Å–µ—Å—Å–∏–∏ (–∏–∑ cookie)

    Returns:
        HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ App Store
    """
    user_agent = request.headers.get('user-agent', '')
    client_ip = get_client_ip(request)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ query params
    timezone = request.query_params.get('timezone')
    language = request.query_params.get('language')
    screen_size = request.query_params.get('screen_size')
    model = request.query_params.get('model')

    # –î–µ—Ç–µ–∫—Ü–∏—è —Ñ—Ä–æ–¥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if Config.FRAUD_DETECTION_ENABLED:
        fingerprint_dict = {
            'user_agent': user_agent,
            'timezone': timezone,
            'language': language,
            'screen_size': screen_size,
            'model': model
        }

        fraud_result = deeplink_handler.detect_potential_fraud(fingerprint_dict, client_ip)

        if fraud_result['risk_score'] > Config.FRAUD_RISK_THRESHOLD:
            logger.warning(f"–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ñ—Ä–æ–¥–∞ –æ—Ç IP {client_ip}: {fraud_result}")

            if 'block_request' in fraud_result['recommendations']:
                raise HTTPException(
                    status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                    detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    if session_id:
        existing_session = deeplink_handler.get_session(session_id)
        if existing_session:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {session_id}")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            if detect_ios_device(user_agent):
                # –†–µ–¥–∏—Ä–µ–∫—Ç –≤ App Store –¥–ª—è iOS
                app_store_url = f"https://apps.apple.com/app/id{promo_id}" if promo_id.isdigit() else "https://apps.apple.com"
                return RedirectResponse(url=app_store_url)
            else:
                # –í–æ–∑–≤—Ä–∞—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                return HTMLResponse(content=generate_instruction_page(domain, promo_id))

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        new_session_id = deeplink_handler.create_session(
            promo_id=promo_id,
            domain=domain,
            user_agent=user_agent,
            timezone=timezone,
            language=language,
            screen_size=screen_size,
            model=model,
            ttl_hours=ttl,
            ip_address=client_ip
        )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookie
        samesite_value: Literal["lax", "strict", "none"] = Config.COOKIE_SAMESITE

        response.set_cookie(
            key=Config.COOKIE_NAME,
            value=new_session_id,
            max_age=ttl * 3600,  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            secure=Config.COOKIE_SECURE,
            httponly=Config.COOKIE_HTTPONLY,
            samesite=samesite_value
        )

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {new_session_id} –æ—Ç IP: {client_ip}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ user agent
        if detect_ios_device(user_agent):
            # –†–µ–¥–∏—Ä–µ–∫—Ç –≤ App Store –¥–ª—è iOS
            app_store_url = f"https://apps.apple.com/app/id{promo_id}" if promo_id.isdigit() else "https://apps.apple.com"
            return RedirectResponse(url=app_store_url)
        else:
            # –í–æ–∑–≤—Ä–∞—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            return HTMLResponse(content=generate_instruction_page(domain, promo_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–∏–ø–ª–∏–Ω–∫–∞"
        )


@app.post("/resolve", response_model=ResolveResponse)
async def resolve_deeplink(request: ResolveRequest) -> ResolveResponse:
    """
    –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–∏–ø–ª–∏–Ω–∫–∞ –ø–æ fingerprint —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞

    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å fingerprint –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –¥–∏–ø–ª–∏–Ω–∫–µ –∏–ª–∏ null
    """
    try:
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–µ—Å—Å–∏–∏ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
        matching_session = deeplink_handler.find_matching_session(request.fingerprint)

        if matching_session:
            # –û—Ç–º–µ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ matching
            confidence_score = matching_session.get('match_confidence', 0.0)
            match_details = matching_session.get('match_details', {})

            deeplink_handler.mark_session_resolved(
                matching_session['session_id'],
                confidence_score,
                match_details
            )

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏: {matching_session['session_id']} "
                       f"—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {confidence_score:.3f}")

            return ResolveResponse(
                success=True,
                promo_id=matching_session.get('promo_id'),
                domain=matching_session.get('domain'),
                session_id=matching_session.get('session_id'),
                redirect_url=request.fallback_url,
                app_url=request.app_scheme,
                matched=True,
                message="–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
            )
        else:
            logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
            return ResolveResponse(
                success=False,
                promo_id=None,
                domain=None,
                session_id=None,
                redirect_url=request.fallback_url,
                app_url=request.app_scheme,
                matched=False,
                message="–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–∏–ø–ª–∏–Ω–∫–∞: {e}")
        return ResolveResponse(
            success=False,
            promo_id=None,
            domain=None,
            session_id=None,
            redirect_url=request.fallback_url,
            app_url=request.app_scheme,
            matched=False,
            message=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = asyncio.get_event_loop().time()
    client_ip = get_client_ip(request)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    response = await call_next(request)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    process_time = asyncio.get_event_loop().time() - start_time
    logger.info(
        f"{request.method} {request.url.path} - "
        f"IP: {client_ip} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.4f}s"
    )

    return response


if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=Config.API_HOST,
        port=Config.API_PORT,
        reload=Config.LOG_LEVEL == "DEBUG",
        log_level=Config.LOG_LEVEL.lower(),
        access_log=True
    )